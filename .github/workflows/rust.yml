name: Rust

on:
  push:
    branches:
      - main
    tags:
      - '*'
  pull_request:
    branches:
      - main

permissions: write-all

env:
  CARGO_TERM_COLOR: always

jobs:
  format:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - run: cargo fmt --all -- --check
  lint:
    needs: [format]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - run: cargo clippy --all-targets --all-features -- -D clippy::pedantic
  build:
    needs: [format, lint]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            env:
              CC: gcc
              RUSTFLAGS: '-D warnings'
          - target: x86_64-apple-darwin
            os: macos-latest
            env:
              CC: clang
              RUSTFLAGS: '-D warnings'
          - target: x86_64-pc-windows-gnu
            os: windows-latest
            env:
              CC: gcc
              RUSTFLAGS: '-D warnings'
          - target: aarch64-unknown-linux-musl
            os: ubuntu-latest
            env:
              AR: llvm-ar
              CC: clang
              RUSTFLAGS: '-D warnings -Clink-self-contained=yes -Clinker=rust-lld'
          - target: aarch64-apple-darwin
            os: macos-latest
            env:
              CC: clang
              RUSTFLAGS: '-D warnings'
    env:
      CARGO_TARGET_DIR: ${{ github.workspace }}
    steps:
    - uses: actions/checkout@v3
    - run: rustup target add ${{ matrix.target }}
    - if: "!startsWith(github.ref, 'refs/tags/')"
      run: cargo build --verbose --target=${{ matrix.target }}
      env: ${{ matrix.env }}
    - if: startsWith(github.ref, 'refs/tags/')
      run: cargo build --release --target=${{ matrix.target }}
      env: ${{ matrix.env }}
    - if: startsWith(github.ref, 'refs/tags/') && ${{ matrix.target }} != 'x86_64-pc-windows-gnu'
      uses: actions/upload-artifact@v3
      with:
        name: tfam_${{ matrix.target }}
        path: ${{ matrix.target == 'x86_64-pc-windows-gnu' && 'D:\\a\\tfam\\tfexe' || format('{0}{1}', matrix.target, '/release/tfexe') }}
  test:
    needs: [format, lint, build]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            env:
              CC: gcc
              RUSTFLAGS: '-D warnings'
          - target: x86_64-apple-darwin
            os: macos-latest
            env:
              CC: clang
              RUSTFLAGS: '-D warnings'
          - target: x86_64-pc-windows-gnu
            os: windows-latest
            env:
              CC: gcc
              RUSTFLAGS: '-D warnings'
    steps:
    - uses: actions/checkout@v3
    - run: rustup target add ${{ matrix.target }}
    - run: cargo test --verbose --all --target=${{ matrix.target }}
      env: ${{ matrix.env }}
  note:
    needs: [format, lint, build, test]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
    - uses: actions/checkout@v3
    - run: gh release create ${GITHUB_REF#refs/*/} --generate-notes
  release:
    needs: [format, lint, build, test, note]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    strategy:
      matrix:
        target: [x86_64-unknown-linux-musl, x86_64-apple-darwin, x86_64-pc-windows-gnu, aarch64-unknown-linux-musl, aarch64-apple-darwin]
    steps:
    - uses: actions/checkout@v3
    - uses: actions/download-artifact@v3
      with:
        name: tfam_${{ matrix.target }}
    - run: mv tfam tfexe_${{ matrix.target }}
    - run: gh release upload ${GITHUB_REF#refs/*/} tfam_${{ matrix.target }}


